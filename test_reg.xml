<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="23" skipped="0" tests="24" time="324.398" timestamp="2025-04-24T12:19:14.123339-04:00" hostname="DESKTOP-7DRO9R6"><testcase classname="tests.test_registration" name="test_registration_cases[test_data0]" time="14.855" /><testcase classname="tests.test_registration" name="test_registration_cases[test_data1]" time="8.950"><failure message="Failed: Fallo en el caso de prueba 'Invalid email': El campo de email no es válido.">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005C7E210&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005C7DF90&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005C7E350&gt;, ...}
test_data = ('Invalid email', 'FirstName', 'LastName', 'invalid_email', '12345', 'failure - invalid email')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005C7E210&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005C7DF90&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005C7E350&gt;, ...}
test_name = 'Invalid email', first_name = 'FirstName', last_name = 'LastName', email = 'invalid_email', password = '12345'
expected_outcome = 'failure - invalid email'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
&gt;                       pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
E                       Failed: Fallo en el caso de prueba 'Invalid email': El campo de email no es válido.

tests\test_registration.py:45: Failed</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data2]" time="8.998"><failure message="Failed: Fallo en el caso de prueba 'Empty email': El campo 'email' es obligatorio pero está vacío.">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DA6710&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005DA6490&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DA6850&gt;, ...}
test_data = ('Empty email', 'FirstName', 'LastName', '', '12345', 'failure - email required')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DA6710&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005DA6490&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DA6850&gt;, ...}
test_name = 'Empty email', first_name = 'FirstName', last_name = 'LastName', email = '', password = '12345'
expected_outcome = 'failure - email required'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
&gt;                       pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
E                       Failed: Fallo en el caso de prueba 'Empty email': El campo 'email' es obligatorio pero está vacío.

tests\test_registration.py:56: Failed</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data3]" time="8.943"><failure message="Failed: Fallo en el caso de prueba 'Email with spaces': El campo de email no es válido.">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005D20180&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005C03E10&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005D202B0&gt;, ...}
test_data = ('Email with spaces', 'FirstName', 'LastName', 'test @domain.com', '12345', 'failure - invalid email')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005D20180&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005C03E10&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005D202B0&gt;, ...}
test_name = 'Email with spaces', first_name = 'FirstName', last_name = 'LastName', email = 'test @domain.com'
password = '12345', expected_outcome = 'failure - invalid email'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
&gt;                       pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
E                       Failed: Fallo en el caso de prueba 'Email with spaces': El campo de email no es válido.

tests\test_registration.py:45: Failed</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data4]" time="14.221"><failure message="AssertionError: Unexpected success - failure - invalid email was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005E14050&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005D23CE0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005E14180&gt;, ...}
test_data = ('Invalid email format', 'FirstName', 'LastName', 'a@a', '12345', 'failure - invalid email')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005E14050&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005D23CE0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005E14180&gt;, ...}
test_name = 'Invalid email format', first_name = 'FirstName', last_name = 'LastName', email = 'a@a', password = '12345'
expected_outcome = 'failure - invalid email'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - invalid email was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data5]" time="9.000"><failure message="Failed: Fallo en el caso de prueba 'Empty first name': El campo 'firstName' es obligatorio pero está vacío.">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000004E12570&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000004E12330&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000004E12D50&gt;, ...}
test_data = ('Empty first name', '', 'LastName', 'test9999@example.com', '12345', 'failure - first name required')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000004E12570&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000004E12330&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000004E12D50&gt;, ...}
test_name = 'Empty first name', first_name = '', last_name = 'LastName', email = 'test9999@example.com', password = '12345'
expected_outcome = 'failure - first name required'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
&gt;                       pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
E                       Failed: Fallo en el caso de prueba 'Empty first name': El campo 'firstName' es obligatorio pero está vacío.

tests\test_registration.py:56: Failed</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data6]" time="8.935"><failure message="Failed: Fallo en el caso de prueba 'Empty last name': El campo 'lastName' es obligatorio pero está vacío.">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005D97130&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005D96F10&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005D97240&gt;, ...}
test_data = ('Empty last name', 'FirstName', '', 'test9999@example.com', '12345', 'failure - last name required')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005D97130&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005D96F10&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005D97240&gt;, ...}
test_name = 'Empty last name', first_name = 'FirstName', last_name = '', email = 'test9999@example.com', password = '12345'
expected_outcome = 'failure - last name required'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
&gt;                       pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
E                       Failed: Fallo en el caso de prueba 'Empty last name': El campo 'lastName' es obligatorio pero está vacío.

tests\test_registration.py:56: Failed</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data7]" time="8.935"><failure message="Failed: Fallo en el caso de prueba 'Empty password': El campo 'password' es obligatorio pero está vacío.">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005EB85A0&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005EB87C0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005EB9260&gt;, ...}
test_data = ('Empty password', 'FirstName', 'LastName', 'test9999@example.com', '', 'failure - password required')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005EB85A0&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005EB87C0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005EB9260&gt;, ...}
test_name = 'Empty password', first_name = 'FirstName', last_name = 'LastName', email = 'test9999@example.com'
password = '', expected_outcome = 'failure - password required'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
&gt;                       pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
E                       Failed: Fallo en el caso de prueba 'Empty password': El campo 'password' es obligatorio pero está vacío.

tests\test_registration.py:56: Failed</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data8]" time="14.217"><failure message="AssertionError: Unexpected success - failure - password too short was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x00000000009C0B50&gt;, 'home': &lt;pages.automation_p...ect at 0x00000000009C0950&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x00000000009C0C50&gt;, ...}
test_data = ('Short password', 'FirstName', 'LastName', 'test9999@example.com', '123', 'failure - password too short')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x00000000009C0B50&gt;, 'home': &lt;pages.automation_p...ect at 0x00000000009C0950&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x00000000009C0C50&gt;, ...}
test_name = 'Short password', first_name = 'FirstName', last_name = 'LastName', email = 'test9999@example.com'
password = '123', expected_outcome = 'failure - password too short'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - password too short was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data9]" time="14.115"><failure message="AssertionError: Unexpected success - failure - password too long was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x00000000009C2F50&gt;, 'home': &lt;pages.automation_p...ect at 0x00000000009C2D50&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x00000000009C3050&gt;, ...}
test_data = ('Long password', 'FirstName', 'LastName', 'test9999@example.com', '123456789012345678901234567890', 'failure - password too long')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x00000000009C2F50&gt;, 'home': &lt;pages.automation_p...ect at 0x00000000009C2D50&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x00000000009C3050&gt;, ...}
test_name = 'Long password', first_name = 'FirstName', last_name = 'LastName', email = 'test9999@example.com'
password = '123456789012345678901234567890', expected_outcome = 'failure - password too long'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - password too long was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data10]" time="14.164"><failure message="AssertionError: Unexpected success - failure - invalid name was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000000961E50&gt;, 'home': &lt;pages.automation_p...ect at 0x00000000009617C0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000000961F40&gt;, ...}
test_data = ('Special characters in name', 'First@Name', 'Last#Name', 'test9999@example.com', '12345', 'failure - invalid name')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000000961E50&gt;, 'home': &lt;pages.automation_p...ect at 0x00000000009617C0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000000961F40&gt;, ...}
test_name = 'Special characters in name', first_name = 'First@Name', last_name = 'Last#Name', email = 'test9999@example.com'
password = '12345', expected_outcome = 'failure - invalid name'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - invalid name was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data11]" time="14.116"><failure message="AssertionError: Unexpected success - failure - first name required was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000000A58F50&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000000A58D70&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000000A59040&gt;, ...}
test_data = ('Whitespace-only first name', '   ', 'LastName', 'test9999@example.com', '12345', 'failure - first name required')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000000A58F50&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000000A58D70&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000000A59040&gt;, ...}
test_name = 'Whitespace-only first name', first_name = '   ', last_name = 'LastName', email = 'test9999@example.com'
password = '12345', expected_outcome = 'failure - first name required'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - first name required was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data12]" time="14.128"><failure message="AssertionError: Unexpected success - failure - last name required was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000000AE4670&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000000A73BD0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000000AE4590&gt;, ...}
test_data = ('Whitespace-only last name', 'FirstName', '   ', 'test9999@example.com', '12345', 'failure - last name required')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000000AE4670&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000000A73BD0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000000AE4590&gt;, ...}
test_name = 'Whitespace-only last name', first_name = 'FirstName', last_name = '   ', email = 'test9999@example.com'
password = '12345', expected_outcome = 'failure - last name required'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - last name required was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data13]" time="14.176"><failure message="AssertionError: Unexpected success - failure - password required was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000000AE5B70&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000000AE5470&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000000AE6350&gt;, ...}
test_data = ('Whitespace-only password', 'FirstName', 'LastName', 'test9999@example.com', '   ', 'failure - password required')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000000AE5B70&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000000AE5470&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000000AE6350&gt;, ...}
test_name = 'Whitespace-only password', first_name = 'FirstName', last_name = 'LastName', email = 'test9999@example.com'
password = '   ', expected_outcome = 'failure - password required'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - password required was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data14]" time="38.939"><failure message="Failed: Fallo en el caso de prueba 'Duplicate email registration': Timeout alcanzado.">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DC7E10&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005DC7520&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DC7790&gt;, ...}
test_name = 'Duplicate email registration', first_name = 'FirstName', last_name = 'LastName', email = 'team2@taqc.com'
password = '12345', expected_outcome = 'failure - email already in use'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
&gt;           await login.fill_login_form(email, password)

tests\test_registration.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\login_form.py:10: in fill_login_form
    await self.page.fill("input#loginEmail", email)
..\..\..\..\AppData\Local\Programs\Python\Python313\Lib\site-packages\playwright\async_api\_generated.py:10082: in fill
    await self._impl_obj.fill(
..\..\..\..\AppData\Local\Programs\Python\Python313\Lib\site-packages\playwright\_impl\_page.py:872: in fill
    return await self._main_frame.fill(**locals_to_params(locals()))
..\..\..\..\AppData\Local\Programs\Python\Python313\Lib\site-packages\playwright\_impl\_frame.py:527: in fill
    await self._channel.send("fill", locals_to_params(locals()))
..\..\..\..\AppData\Local\Programs\Python\Python313\Lib\site-packages\playwright\_impl\_connection.py:61: in send
    return await self._connection.wrap_api_call(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;playwright._impl._connection.Connection object at 0x00000000009C1D50&gt;
cb = &lt;function Channel.send.&lt;locals&gt;.&lt;lambda&gt; at 0x0000000000A971A0&gt;, is_internal = False

    async def wrap_api_call(
        self, cb: Callable[[], Any], is_internal: bool = False
    ) -&gt; Any:
        if self._api_zone.get():
            return await cb()
        task = asyncio.current_task(self._loop)
        st: List[inspect.FrameInfo] = getattr(task, "__pw_stack__", inspect.stack())
        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)
        self._api_zone.set(parsed_st)
        try:
            return await cb()
        except Exception as error:
&gt;           raise rewrite_error(error, f"{parsed_st['apiName']}: {error}") from None
E           playwright._impl._errors.TimeoutError: Page.fill: Timeout 30000ms exceeded.
E           Call log:
E             - waiting for locator("input#loginEmail")

..\..\..\..\AppData\Local\Programs\Python\Python313\Lib\site-packages\playwright\_impl\_connection.py:528: TimeoutError

During handling of the above exception, another exception occurred:

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DC7E10&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005DC7520&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DC7790&gt;, ...}
test_data = ('Duplicate email registration', 'FirstName', 'LastName', 'team2@taqc.com', '12345', 'failure - email already in use')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DC7E10&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005DC7520&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DC7790&gt;, ...}
test_name = 'Duplicate email registration', first_name = 'FirstName', last_name = 'LastName', email = 'team2@taqc.com'
password = '12345', expected_outcome = 'failure - email already in use'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
                assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
                print(f"Result: Failure as expected - {expected_outcome}")
    
        except TimeoutError:
            print(f"Timeout alcanzado en el caso de prueba '{test_name}'. Cerrando el test.")
&gt;           pytest.fail(f"Fallo en el caso de prueba '{test_name}': Timeout alcanzado.")
E           Failed: Fallo en el caso de prueba 'Duplicate email registration': Timeout alcanzado.

tests\test_registration.py:91: Failed</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data15]" time="9.014"><failure message="Failed: Fallo en el caso de prueba 'Missing all fields': El campo 'firstName' es obligatorio pero está vacío.">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005E95790&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005E97B90&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005E97A10&gt;, ...}
test_data = ('Missing all fields', '', '', '', '', 'failure - all fields required')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005E95790&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005E97B90&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005E97A10&gt;, ...}
test_name = 'Missing all fields', first_name = '', last_name = '', email = '', password = ''
expected_outcome = 'failure - all fields required'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
&gt;                       pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
E                       Failed: Fallo en el caso de prueba 'Missing all fields': El campo 'firstName' es obligatorio pero está vacío.

tests\test_registration.py:56: Failed</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data16]" time="14.278"><failure message="AssertionError: Unexpected success - failure - invalid email was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005E4A150&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005E4B650&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005E4A090&gt;, ...}
test_data = ('Email with special characters', 'FirstName', 'LastName', 'test!@domain.com', '12345', 'failure - invalid email')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005E4A150&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005E4B650&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005E4A090&gt;, ...}
test_name = 'Email with special characters', first_name = 'FirstName', last_name = 'LastName', email = 'test!@domain.com'
password = '12345', expected_outcome = 'failure - invalid email'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - invalid email was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data17]" time="8.994"><failure message="Failed: Fallo en el caso de prueba 'Email without domain': El campo de email no es válido.">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005CF2990&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005CF2AF0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005CF28E0&gt;, ...}
test_data = ('Email without domain', 'FirstName', 'LastName', 'test@', '12345', 'failure - invalid email')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005CF2990&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005CF2AF0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005CF28E0&gt;, ...}
test_name = 'Email without domain', first_name = 'FirstName', last_name = 'LastName', email = 'test@', password = '12345'
expected_outcome = 'failure - invalid email'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
&gt;                       pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
E                       Failed: Fallo en el caso de prueba 'Email without domain': El campo de email no es válido.

tests\test_registration.py:45: Failed</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data18]" time="14.112"><failure message="AssertionError: Unexpected success - failure - weak password was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x00000000009C5440&gt;, 'home': &lt;pages.automation_p...ect at 0x00000000009C55A0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x00000000009C5390&gt;, ...}
test_data = ('Password with only numbers', 'FirstName', 'LastName', 'test9999@example.com', '12345678', 'failure - weak password')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x00000000009C5440&gt;, 'home': &lt;pages.automation_p...ect at 0x00000000009C55A0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x00000000009C5390&gt;, ...}
test_name = 'Password with only numbers', first_name = 'FirstName', last_name = 'LastName', email = 'test9999@example.com'
password = '12345678', expected_outcome = 'failure - weak password'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - weak password was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data19]" time="14.404"><failure message="AssertionError: Unexpected success - failure - weak password was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005D36B70&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005D36030&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005D367B0&gt;, ...}
test_data = ('Password with only letters', 'FirstName', 'LastName', 'test9999@example.com', 'abcdefgh', 'failure - weak password')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005D36B70&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005D36030&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005D367B0&gt;, ...}
test_name = 'Password with only letters', first_name = 'FirstName', last_name = 'LastName', email = 'test9999@example.com'
password = 'abcdefgh', expected_outcome = 'failure - weak password'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - weak password was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data20]" time="14.256"><failure message="AssertionError: Unexpected success - failure - weak password was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DD1810&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005DD2350&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DD1770&gt;, ...}
test_data = ('Password with special characters only', 'FirstName', 'LastName', 'test9999@example.com', '@#$%^&amp;*', 'failure - weak password')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DD1810&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005DD2350&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DD1770&gt;, ...}
test_name = 'Password with special characters only', first_name = 'FirstName', last_name = 'LastName'
email = 'test9999@example.com', password = '@#$%^&amp;*', expected_outcome = 'failure - weak password'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - weak password was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data21]" time="14.054"><failure message="AssertionError: Unexpected success - failure - email too long was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DCCB90&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005C6F890&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DCF260&gt;, ...}
test_data = ('Very long email', 'FirstName', 'LastName', 'testaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@example.com', '12345', 'failure - email too long')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DCCB90&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005C6F890&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DCF260&gt;, ...}
test_name = 'Very long email', first_name = 'FirstName', last_name = 'LastName'
email = 'testaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@example.com'
password = '12345', expected_outcome = 'failure - email too long'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - email too long was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data22]" time="14.130"><failure message="AssertionError: Unexpected success - failure - first name too long was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DDDFD0&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005DDDED0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DDE950&gt;, ...}
test_data = ('First name exceeding character limit', 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'LastName', 'test9999@example.com', '12345', 'failure - first name too long')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005DDDFD0&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005DDDED0&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005DDE950&gt;, ...}
test_name = 'First name exceeding character limit'
first_name = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
last_name = 'LastName', email = 'test9999@example.com', password = '12345'
expected_outcome = 'failure - first name too long'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - first name too long was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase><testcase classname="tests.test_registration" name="test_registration_cases[test_data23]" time="14.125"><failure message="AssertionError: Unexpected success - failure - last name too long was expected&#10;assert not True">portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005D45B50&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005D45E50&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005D45ED0&gt;, ...}
test_data = ('Last name exceeding character limit', 'FirstName', 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'test9999@example.com', '12345', 'failure - last name too long')

    @pytest.mark.parametrize("test_data", [
                pytest.param(("Valid registration", "FirstName", "LastName", "test9999@example.com", "12345", "success")),
                pytest.param(("Invalid email", "FirstName", "LastName", "invalid_email", "12345", "failure - invalid email")),
                pytest.param(("Empty email", "FirstName", "LastName", "", "12345", "failure - email required")),
                pytest.param(("Email with spaces", "FirstName", "LastName", "test @domain.com", "12345", "failure - invalid email")),
                pytest.param(("Invalid email format", "FirstName", "LastName", "a@a", "12345", "failure - invalid email")),
                pytest.param(("Empty first name", "", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Empty last name", "FirstName", "", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Empty password", "FirstName", "LastName", "test9999@example.com", "", "failure - password required")),
                pytest.param(("Short password", "FirstName", "LastName", "test9999@example.com", "123", "failure - password too short")),
                pytest.param(("Long password", "FirstName", "LastName", "test9999@example.com", "123456789012345678901234567890", "failure - password too long")),
                pytest.param(("Special characters in name", "First@Name", "Last#Name", "test9999@example.com", "12345", "failure - invalid name")),
                pytest.param(("Whitespace-only first name", "   ", "LastName", "test9999@example.com", "12345", "failure - first name required")),
                pytest.param(("Whitespace-only last name", "FirstName", "   ", "test9999@example.com", "12345", "failure - last name required")),
                pytest.param(("Whitespace-only password", "FirstName", "LastName", "test9999@example.com", "   ", "failure - password required")),
                pytest.param(("Duplicate email registration", "FirstName", "LastName", "team2@taqc.com", "12345", "failure - email already in use")),
                pytest.param(("Missing all fields", "", "", "", "", "failure - all fields required")),
                pytest.param(("Email with special characters", "FirstName", "LastName", "test!@domain.com", "12345", "failure - invalid email")),
                pytest.param(("Email without domain", "FirstName", "LastName", "test@", "12345", "failure - invalid email")),
                pytest.param(("Password with only numbers", "FirstName", "LastName", "test9999@example.com", "12345678", "failure - weak password")),
                pytest.param(("Password with only letters", "FirstName", "LastName", "test9999@example.com", "abcdefgh", "failure - weak password")),
                pytest.param(("Password with special characters only", "FirstName", "LastName", "test9999@example.com", "@#$%^&amp;*", "failure - weak password")),
                pytest.param(("Very long email", "FirstName", "LastName", "test" + "a" * 250 + "@example.com", "12345", "failure - email too long")),
                pytest.param(("First name exceeding character limit", "A" * 100, "LastName", "test9999@example.com", "12345", "failure - first name too long")),
                pytest.param(("Last name exceeding character limit", "FirstName", "B" * 100, "test9999@example.com", "12345", "failure - last name too long")),
    ])
    
    @pytest.mark.asyncio
    async def test_registration_cases(portal_page, test_data):
        test_name, first_name, last_name, email, password, expected_outcome = test_data
&gt;       await run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome)

tests\test_registration.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

portal_page = {'cart_sidebar': &lt;pages.components.cart_sidebar.CartSidebar object at 0x0000000005D45B50&gt;, 'home': &lt;pages.automation_p...ect at 0x0000000005D45E50&gt;, 'login_popup': &lt;pages.components.login_popup.LoginPopup object at 0x0000000005D45ED0&gt;, ...}
test_name = 'Last name exceeding character limit', first_name = 'FirstName'
last_name = 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB'
email = 'test9999@example.com', password = '12345', expected_outcome = 'failure - last name too long'

    @pytest.mark.asyncio
    async def run_test_case(portal_page, test_name, first_name, last_name, email, password, expected_outcome="success"):
        home = portal_page["home"]
        register = portal_page["register"]
        login = portal_page["login"]
        navbar = portal_page["navbar"]
        login_popup = portal_page["login_popup"]
        page = home.page
    
        print(f"\nRunning test case: {test_name}")
    
        await home.navigate()
        await home.close_newsletter_popup()
        await navbar.navigate_to_account()
        await login_popup.open_new_customer_popup()
    
        try:
            await page.wait_for_selector("form#register-form", timeout=3000)
    
            await register.fill_registration_form(first_name, last_name, email, password)
    
            fields_to_validate = [
                ("firstName", first_name, "El campo de nombre no es válido."),
                ("lastName", last_name, "El campo de apellido no es válido."),
                ("email", email, "El campo de email no es válido."),
                ("password", password, "El campo de contraseña no es válido."),
            ]
    
            for field_name, value, error_message in fields_to_validate:
                if value:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_valid = await page.evaluate(
                        """(field) =&gt; field.checkValidity()""",
                        await page.query_selector(selector)
                    )
                    if not is_valid:
                        print(f"{error_message} Valor: '{value}'")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': {error_message}")
                else:
                    selector = f"form#register-form input[name='{field_name}']"
                    is_required = await page.evaluate(
                        """(field) =&gt; field.required""",
                        await page.query_selector(selector)
                    )
                    if is_required:
                        print(f"El campo '{field_name}' es obligatorio pero está vacío.")
                        await register.submit_registration()
                        await page.wait_for_timeout(2000)
                        pytest.fail(f"Fallo en el caso de prueba '{test_name}': El campo '{field_name}' es obligatorio pero está vacío.")
    
            await register.submit_registration()
    
            print("Attempting login after registration...")
            await login.fill_login_form(email, password)
            await login.submit_login()
    
            try:
                await page.wait_for_url(BASE_URL + "/my-account", timeout=5000)
                login_successful = True
                print(f"Test {test_name}: Registration and login successful")
            except TimeoutError:
                login_successful = False
                print(f"Test {test_name}: Login failed after registration")
    
            if login_successful:
                user_id = APIHelper.get_user_id(email)
                if user_id:
                    if APIHelper.delete_user(user_id):
                        print(f"User with ID {user_id} deleted successfully")
                    else:
                        print(f"Error deleting user with ID {user_id}")
                else:
                    print(f"Could not retrieve user ID for email {email}")
    
            if expected_outcome == "success":
                assert login_successful, f"Unexpected failure - success was expected"
                print("Result: Success as expected")
            else:
&gt;               assert not login_successful, f"Unexpected success - {expected_outcome} was expected"
E               AssertionError: Unexpected success - failure - last name too long was expected
E               assert not True

tests\test_registration.py:86: AssertionError</failure></testcase></testsuite></testsuites>